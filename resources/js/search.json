[[{"l":"Introduction","p":["Welcome to the world of ng-plyr, the ultimate video player library for Angular!","Are you ready to transform your video playback experience and impress your users with a YouTube-like interface? Buckle up, because ng-plyr is about to take your video game to the next level!","An HTML5 media player, built using Angular. It can be used in Angular 14 and above.","It is an open-source project, so feel free to use it in your Angular projects to build awesome media player with minimal efforts."]},{"l":"Installation","p":["Getting started with ng-plyr is a breeze! Simply run the following command to add this powerful library to your Angular project:"]},{"l":"Usage","p":["Now that you've installed ng-plyr, it's time to kickstart the fun! Inject the NgPlyrModule into your app.module.ts and prepare to embrace the world of video excellence."]},{"i":"add-ngplyrmodule-to-your-appmodule","l":"Add NgPlyrModule to your AppModule:"},{"l":"Add this tag to your Component html","p":["With ng-plyr integrated, you can effortlessly add the ng-plyr tag anywhere in your app, taking advantage of its various input attributes like src, playlist, and more. Exciting, right?","You can use it in your app like these.","OR","And assign value to mediaUrl in component.ts","Note: playlist is preferred over src, so if both are passed, media will play from playlist"]}],[{"l":"Features"},{"i":"lights-camera-action","l":"Lights, Camera, Action!","p":["Ready to impress your users with video prowess? ng-plyr has got your back! With its array of features, you're in control:","\uD83C\uDFAC Video Playback Control: Control your video's destiny with essential actions like play, pause, seek, volume control, and more, all within your reach!","\uD83D\uDCFA HTML5 Media Format Support: ng-plyr embraces all media formats supported by the HTML5 player, ensuring compatibility and a seamless user experience.","\uD83D\uDD04 Loop It Up: Loop through a single media or your entire playlist to keep the fun going indefinitely!","\uD83D\uDD22 Speed It Up: Change the playback speed, giving your users the option to watch videos at their desired pace.","\uD83D\uDCF1 Picture-in-Picture (PIP): ng-plyr brings the PIP magic, allowing your users to enjoy videos while multitasking. Productivity has never been this entertaining!","\uD83D\uDCFA Chromecast Support: Elevate the viewing experience by casting videos to Chromecast-enabled devices. And guess what? The local player becomes the remote control for the casted media! How cool is that?"]},{"i":"customization-galore","l":"Customization Galore!","p":["Make ng-plyr truly yours! Customize its look and feel effortlessly by updating various CSS variables to blend harmoniously with your application's design and theme.","Learn more on that in Customization guide."]},{"l":"Feature checklist"},{"l":"For end users","p":["Autofetch Video metadata","Button for looping","Can switch to PIP and Fullscreen","Cast to other devices","Change playback speed","Control for media volume","Double tap to seek back/forward","Play Next/Prev media","Playing audio","Seek to specific time by clicking on timeline","Shortcuts available for different buttons","Show loading animation on buffering","Show media title","Shows buffer status on timeline","Switch for autoplay","While casting local player acts as remote"]},{"l":"Controls available for Developers","p":["Provide media src","Custom loading image can be set","Bookmarks can be shown on timeline","Looping the same media","Provide more controls like volume, playfrom, loop etc.","Emit events from ng-plyr: ended, playing, paused, volumechange, fullscreen etc.","Playlist support","Access to Player methods: play, pause, next, prev etc.","Cast service methods are accessible","Player theme can be customised","Hide controls","Multiple media sources","Hover to play media thumnails","Show bookmark text on hovering a bookmark","Show image previews on hovering timeline"]}],[{"i":"events-attributes-and-methods","l":"Events, attributes and Methods"},{"i":"unleash-the-power-of-events-and-attributes","l":"Unleash the Power of Events and Attributes!","p":["Hey there, fellow developer! Brace yourself as we dive into the world of ng-plyr events and attributes that will level up your video player game in Angular!"]},{"i":"input-attributes","l":"\uD83C\uDFAC Input Attributes \uD83C\uDFAC","p":["The ng-plyr tag offers an array of input attributes, giving you the flexibility to fine-tune your media playback experience:","src: Provide the URL of the media source to display your video or audio content.","preload: Define when do you want to fetch video and/or its metadata. Same as HTML video tag's preload Attribute.","loadingImgSrc: Set a custom loading image to charm your users while the media loads.","playFrom: Start playing your media from a specific second to get the perfect playback.","volume: Control the volume level and set it just right for your users.","loop: Enable or disable looping so that the media plays from the beginning or stops at the end.","bookmarks: Highlight specific seconds within the media's duration for easy navigation.","autoplay: Decide whether your media starts playing automatically or waits for a user command.","nextMedia: Define the media that should play next, making your playlist even more engaging.","playlist: Pass an entire playlist to delight your users with continuous playback.","loopPlaylist: Turn on the playlist loop to keep the fun going endlessly.","poster: Greet your users with an awesome video poster."]},{"i":"output-events","l":"\uD83C\uDF89 Output Events \uD83C\uDF89","p":["Get ready for the excitement of ng-plyr's output events, providing you with valuable information about your media playback:","playing: Celebrate as the media starts to play, giving life to your content.","paused: Pause for applause when the media takes a break.","ended: Cue the applause again when the media ends its show.","onnext: Stay ahead by knowing which media is set to play next in your playlist.","onprev: Rewind and take a bow as the previous media steps into the spotlight.","fullscreen: Feel the magic of entering or exiting fullscreen mode.","volumechange: Watch the volume level change or mute/unmute with your commands."]},{"i":"upcoming-inputs-and-output-events","l":"\uD83D\uDE80 Upcoming Inputs and Output Events \uD83D\uDE80","p":["We're always upgrading ng-plyr to offer you more exciting features! Keep an eye out for these upcoming additions:","type: Specify the media type to enhance playback versatility.","captions: Enrich your media experience with captions in different languages.","The excitement doesn't stop there! Be prepared for the error event, which will provide you with vital details about any errors that might occur."]},{"i":"methods---your-arsenal-of-control","l":"Methods - Your Arsenal of Control!","p":["addToPlaylist(mediaItems:Media[], atStart?:boolean): Expand your playlist with media items at the end or start.","changeVolume(level:number): Master the volume knob and set the perfect level (range: 0 to 1).","enableMediaLooping(loop?:boolean): Take control of media looping, setting it to your preferred state (default: true).","enablePlaylistLooping(loop?:boolean): Extend the excitement with playlist looping (default: true).","Feel like a video playback maestro with ng-plyr's arsenal of powerful methods at your disposal:","getCurrentlyPlaying(): Discover which media is currently captivating your audience.","getNextMedia(): Stay one step ahead by knowing what's coming up next in your playlist.","getNumOfMediaInPlaylist(): Count the number of media items in your playlist.","next(): Seamlessly transition to the next media in your playlist.","pause(): The pause button bows to your command, giving your media a break.","play(): Conquer the play button to start your media's performance.","playNext(media:Media[]): Seamlessly add media to your playlist after the current media's performance.","prev(): Rewind and replay the previous media to keep your audience entertained.","seekTo(atSecond:number): Seamlessly seek the media to a specific second to nail the perfect moment.","setPlaybackSpeed(rate:number): Tune your media playback speed within the range of 0.25 to 2.","So, are you ready to unleash the potential of ng-plyr and take your video player experience to new heights? Dive into the world of ng-plyr, and let the magic of seamless media playback begin! \uD83D\uDE80"]},{"l":"Some tables for all the geeky developers"},{"l":"Events and Attributes","p":["You can pass the following as attributes to ng-plyr tag."]},{"l":"Input attributes","p":["Array of seconds within media max duration","autoplay","bookmarks","boolean","Description","Enable/disable autoplay","Input","Keep playing the same media over and over","loadingImgSrc","loop","Loop over playlist","loopPlaylist","Media","Media to be played next","Media[]","nextMedia","number","number[]","Pass entire playlist to play","Play media starting from specified second","playFrom","playlist","poster","preload","Same as HTML video preload Attribute","src","string","Type","URL of custom loading image","URL of media source","URL of the poster image","volume"]},{"l":"Output events","p":["{ level:number, muted:boolean }","boolean","Description","ended","fullscreen","Media","Media ended","Media entered/exited fullscreen","Media paused","Media started to play","onnext","onprev","Output","paused","playing","Playing next media","Playing previous media","Type","Volume changed or muted/unmuted","volumechange"]},{"l":"Upcoming Inputs and Output events","p":["Input","Type","Description","MediaType","Specify media type","captions","[{ path: string, lang: string }]","Add captions to media","Output","error","object","Details of any error if occured"]},{"l":"Methods","p":["Add media to playlist after current media","Add mediaItems to playlist at end/start","addToPlaylist(mediaItems:Media[], atStart?:boolean)","changeVolume(level:number)","Description","enableMediaLooping(loop?:boolean)","enablePlaylistLooping(loop?:boolean)","Get currently playing Media","Get nextMedia","Get number of media items in playlist","getCurrentlyPlaying()","getNextMedia()","getNumOfMediaInPlaylist()","Method(arg:type)","next()","Pause current media","pause()","Play current media","Play next media","Play prev media","play()","playNext(media:Media[])","prev()","Seek media to specific second","seekTo(atSecond:number)","Set media playback rate (range, .25 to 2)","Set volume to level (0 to 1)","setPlaybackSpeed(rate:number)","Turn on loop for media (default true)","Turn on loop for playlist (default true)"]}],[{"l":"Shortcuts"},{"i":"master-ng-plyr-playback-with-handy-shortcuts","l":"\uD83C\uDFAF Master ng-plyr Playback with Handy Shortcuts! \uD83C\uDFAF","p":["Introducing shortcuts - the secret to unlocking rapid control over your ng-plyr video playback! With ng-plyr's intuitive shortcuts, you can effortlessly navigate through your media like a seasoned video virtuoso.","\uD83D\uDCFC Play and Pause: Tap the spacebar or ' k' key to play and pause your media with ease. Embrace the rhythm of your content and pause at just the right moments.","⏩ Fast Forward and Rewind: Seek forward or backward by 5 seconds with the left/right arrow keys. Never miss a beat and stay in perfect sync with your video.","\uD83D\uDD07 Mute and Unmute: Silence or restore sound with a quick ' m' keystroke. Mute distractions or amplify the audio brilliance as per your command.","\uD83D\uDD09\uD83D\uDD0A Volume Control: Fine-tune the volume using the up/down arrow keys. Increase or decrease the volume to match your preferred audio levels.","⏭️⏮️ Next and Previous Media: Easily switch to the next or previous media in your playlist using the ' Shift + N' and ' Shift + P' keys. Seamlessly transition from one video to the next.","\uD83D\uDCE2 Toggle Fullscreen: Embrace a cinematic experience by toggling fullscreen with the ' f' key. Immerse yourself and your audience in captivating visuals.","Ready to take control of your ng-plyr player like never before? Embrace the efficiency and convenience of shortcuts to orchestrate your media playback seamlessly."]},{"l":"Keyboard Shortcuts","p":["0 or home","1 to 9","Down arrow","end","f","Function","Go to 10% to 90%","Go to end","Go to start","i","k","Key","Left arrow","m","Mute/Unmute","Play next media","Play prev media","Play/Pause","Right arrow","Seek ahead 5 sec","Seek back 5 sec","Shift + N","Shift + P","Space bar","Toggle fullscreen","Toggle miniplayer","Up arrow","Volume down","Volume up"]}],[{"l":"Cast"},{"i":"elevate-your-video-experience-with-chromecast","l":"Elevate Your Video Experience with Chromecast!","p":["Are you ready to take your video playback to the big screen and wow your audience with Chromecast support? Let's set it up and get the show rolling!"]},{"i":"setup","l":"\uD83D\uDE80 Setup \uD83D\uDE80","p":["To enable Chromecast and cast your ng-plyr media to the big screen, follow these simple steps:","Open your index.html file.","Add the following script just before the closing /body tag to load the necessary Cast Sender Framework:","Now, you're all set to unleash the power of Chromecast and bring your ng-plyr media to life on larger screens!"]},{"i":"code-snippet-for-casting-with-ng-plyr","l":"\uD83D\uDCBB Code snippet for Casting with ng-plyr","p":["Please make sure to replace ' path/to/your/cast.service' with the actual path to your CastService in the import statement. Additionally, implement the listenToPlayerEvents() method according to your application's requirements to handle player events and enable casting mode appropriately.","With this setup, you're all set to cast your media to the big screen and provide an immersive casting experience to your users!"]},{"i":"castservice-your-gateway-to-chromecast","l":"\uD83D\uDCFA CastService - Your Gateway to Chromecast \uD83D\uDCFA","p":["Are you ready to wield the power of ng-plyr and Chromecast like a true video wizard? Let's explore the incredible methods that will elevate your media experience to new heights.","With Chromecast enabled, you can now utilize the magic of CastService in your components. Let's explore the methods it offers:","play(): Embrace the magic of play! With this method, you can command your media to start playing, captivating your audience and bringing your content to life.","pause(): Sometimes, a pause is necessary for a moment of reflection. Use this method to gracefully pause your media and let your audience catch their breath.","stopCasting(): The grand finale! Stop casting your media to the big screen with this method and return to your ng-plyr player's local performance.","mute(): Silence, please! Use this method to mute the media and create a moment of peace amidst the sound.","unmute(): Unleash the sound once again! With this method, you can unmute the media and let the symphony continue.","setVolumeLevel(volume: number): Take control of the volume and set it to your desired level (range: 0 to 1). Let the perfect audio balance harmonize with your content.","seekTo(toSec: number): Want to take your audience to a specific moment? Use this method to seek the media to a particular second and create the perfect scene.","initializeCastApi(): Welcome to the world of Chromecast! This method initializes the Cast SDK and prepares your ng-plyr player for seamless casting.","loadMedia(mediaURL?: string, contentType?: string): Unleash your media onto the big screen! Cast your media to the receiver using this method and choose the contentType for a flawless playback experience.","endCurrentSession(stopCasting: boolean): The final act! Use this method to stop casting or gracefully end the current session with your ng-plyr player.","skipAd(): No more interruptions! Skip ads and keep your content flowing smoothly with this method.","stopListeningRemotePlayerEvents(): Sometimes, it's time to stop listening. Use this method to cease listening to remote player events.","onCastEvent(eventName: string, cb: Function): Be the conductor of remote player events! Create and handle custom remote player events with this method, letting you orchestrate a mesmerizing media experience. In eventName you can put RemotePlayerEventType of cast.framework.RemotePlayer"]},{"i":"code-snippet-for-oncastevent-method","l":"\uD83D\uDCBB Code Snippet for onCastEvent method","p":["There you have it, an arsenal of methods to control your ng-plyr media and cast it to the grand stage of Chromecast. Embrace these methods and let your video masterpiece shine like never before!"]}],[{"l":"Customization"},{"i":"customize-ng-plyr-to-match-your-style","l":"Customize ng-plyr to Match Your Style!","p":["ng-plyr allows you to personalize the look and feel of your video player to seamlessly blend with your application's design. Let's embark on a customization journey, where you can tweak various elements to achieve the perfect aesthetic."]},{"i":"font-properties","l":"Font Properties \uD83D\uDD8B️"},{"i":"video-background","l":"Video Background \uD83C\uDFA5"},{"i":"header-overlay-and-controls","l":"Header, Overlay, and Controls \uD83C\uDF9B️"},{"i":"loading-spinner","l":"Loading Spinner ⏳"},{"i":"menu-box","l":"Menu Box \uD83D\uDCCB"},{"i":"progress-bar","l":"Progress bar \uD83D\uDE80","p":["Your ng-plyr video player is now a canvas for your creativity! Take it a step further and customize the progress bar thumb to achieve the perfect visual balance, or just for fun."]},{"i":"show-your-creativity-or-just-have-fun","l":"Show your creativity \uD83C\uDFA8 or just have fun \uD83C\uDF89","p":["Get creative and go beyond the ordinary by adding any emoji, SVG, or image as the thumb of the progress bar. Let your imagination run wild, and infuse your player with a unique touch that sets it apart from the rest.","Feel free to modify the above variables to your preferred colors, images, or gradients. Simply set these custom properties in your Angular stylesheets (e.g., styles.css) to see your ng-plyr player transform according to your choices.","Now, embrace the power of customization and make your ng-plyr video player a true reflection of your application's style!","Happy customizing! \uD83C\uDFA8"]}],[{"l":"Updates"},{"i":"v061-3-aug-2023","l":"v0.6.1 (3 Aug 2023)","p":["Added new css variables for customizing progress bar"]},{"i":"v060-2-aug-2023","l":"v0.6.0 (2 Aug 2023)"},{"l":"Features","p":["Custom theme can be added to the player"]},{"i":"v052-31-jul-2023","l":"v0.5.2 (31 Jul 2023)","p":["Fixed bugs","B01: While casting, next media is not playing automatically, when current one ends"]},{"i":"v050-30-jul-2023","l":"v0.5.0 (30 Jul 2023)","p":["Fixed bugs: Media not playing after casting device was connected"]},{"i":"features-1","l":"Features","p":["Local player becomes remote when casting media"]},{"i":"known-issues","l":"Known issues:","p":["B01: While casting, next media is not playing automatically, when current one ends","B02: Volume of cast receiver not changing from local player UI"]},{"i":"v030-25-jul-2023","l":"v0.3.0 (25 Jul 2023)","p":["Updated UI"]},{"i":"features-2","l":"Features","p":["Added support for casting media to chromecast"]},{"i":"v020-11-sep-2022","l":"v0.2.0 (11 Sep 2022)"},{"i":"features-3","l":"Features","p":["Access to Player methods: play, pause, next, prev etc."]},{"i":"v010-11-sep-2022","l":"v0.1.0 (11 Sep 2022)"},{"i":"features-4","l":"Features","p":["Playlist support","Button for looping"]}]]